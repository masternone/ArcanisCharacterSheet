/* *  Project:      Arcanis Character Sheet *  Description:  The way skills are chosen will require additional functionality to be able to creat selections *  Author:       Edward Grant *  License:      MIT -- http://opensource.org/licenses/mit-license.php/ *  Last Updated: August 2012 *  Requirements: jQuery -- http://jquery.com/ *  Thanks:       jQuery Boilerplate -- http://jqueryboilerplate.com/ */;( function( $, window, undefined ){	var pluginName = 'skillAdd',		document = window.document,		defaults = {			target     : '#skillAddBefore',			skill      : [],			skillGroup : [],			type       : []		};	function Plugin( element, options ){		this.element = $( element );		this.options = $.extend( {}, defaults, options );		this._defaults = defaults;		this._name = pluginName;		this.init( this );	}	Plugin.prototype.init = function( self ){		// on event add a new select for the type		self.element.click( function( e ){			var level = 0;			// get the count of skills allready added			var skillCount = $( 'p.skillAdd' ).length;			// Add a paragraph to wrap the form fields that define this selection			$( self.options.target ).before( '<p id="skillAdd-' + skillCount + '" class="skillAdd"></p>' );			// Add the typeSelect to the paragraph			self.typeSelect( e, self, skillCount, level );		});	}	// Level is ued to distinguish level because if you select choose that means	// that you have more than one specfic and/or group you want to choose from	// and will need to use level to distinguish between them.	Plugin.prototype.typeSelect = function( e, self, skillCount, level ){		// add the select diffrently depending on event fired		if( e.type == 'click' ){			$( 'p#skillAdd-' + skillCount ).append( self.typeSelectHelper( e, self, skillCount, level ));		} else {			// ensure that the level on the select is a unique item			while( $( 'select#skillType-' + skillCount + '-' + level ).length > 0 ){				level++;			}			$( e.target ).after( self.typeSelectHelper( e, self, skillCount, level ));		}		// push the select to show select that controles this		if( level > 0 ){			var targetLevel = /-(\d*)$/.exec( $( e.target ).attr( 'id' ))[1] * 1;			for( var i = 0; i < $( 'div#skillTypePush-' + skillCount + '-' + targetLevel ).length + 1; i++ ){				var clear = i == 0 ? 'clearfix' : '';				$( 'label#skillTypeLabel-' + skillCount + '-' + level ).before(					'<div id="skillTypePush-' + skillCount + '-' + level + '" class="push ' + clear + '">&nbsp;</div>'				)			}		}		// add options to select		for( n in self.options.type ){			$( 'select#skillType-' + skillCount + '-' + level ).append(				'<option value="' + n + '">' + self.options.type[n] + '</option>'			);		}		// Add change listner to skillType		$( 'select#skillType-' + skillCount + '-' + level ).change( function( e ){			// makesure you are working at the level of the select changed			level = /-(\d*)$/.exec( $( this ).attr( 'id' ))[1] * 1;			//TODO: remove all previously add options that were added by this event			$( 				'label#skillSpecficLabel-' + skillCount + '-' + level,				'select#skillSpecfic-'     + skillCount + '-' + level,				'label#skillGroupLabel-'   + skillCount + '-' + level,				'select#skillGroup-'       + skillCount + '-' + level			).remove();			// grab amount of push on this			var push = $( 'div#skillTypePush-' + skillCount + '-' + level ).length;			console.log( $( '.push.clearfix ' ) );			$( '.push.clearfix ' ).nextAll( '.push.clearfix' ).each( function(){				console.log( this );				if( $( this ).nextAll( '#' + $( this ).attr( 'id' )).andSelf().length > push ){					$( this ).nextAll( '#' + $( this ).attr( 'id' )).andSelf().remove()				} else {					push = 9999;				}			});			// add a select based on the choice			switch( self.options.type[$( this ).val()] ){				case 'Specfic':					self.specficSelect( e, self, skillCount, level );					break;				case 'Group':					self.groupSelect( e, self, skillCount, level );					break;				case 'Choice':					// choice implies that more than of the other options is needed					self.typeSelect( e, self, skillCount, level );					self.typeSelect( e, self, skillCount, level );					break;				default:					console.log( '$( this ).val()', $( this ).val() );					console.log( 'self.options.type[$( this ).val()]', self.options.type[$( this ).val()] );			}		});	}	Plugin.prototype.typeSelectHelper = function( e, self, skillCount, level ){		return '' +			'<label id="skillTypeLabel-' + skillCount + '-' + level + '" for="skillType[' + skillCount + '][' + level + ']" >Type</label>' +			'<select id="skillType-' + skillCount + '-' + level + '" name="skillType[' + skillCount + '][' + level + ']" >'+				'<option value="-1">Select Type</option>' +			'</select>';	}	Plugin.prototype.specficSelect = function( e, self, skillCount, level ){		$( 'select#skillType-' + skillCount + '-' + level ).after(			'<label id="skillSpecficLabel-' + skillCount + '-' + level + '" for="skillSpecfic[' + skillCount + '][' + level + ']" >Specfic Skill</label>' +			'<select id="skillSpecfic-' + skillCount + '-' + level + '" name="skillSpecfic[' + skillCount + '][' + level + ']" >'+				'<option value="-1">Select Specfic Skill</option>' +			'</select>'		);		for( n in self.options.skill ){			$( 'select#skillSpecfic-' + skillCount + '-' + level ).append(				'<option value="' + n + '">' + self.options.skill[n].name + '</option>'			);		}	}	Plugin.prototype.groupSelect = function( e, self, skillCount, level ){		$( 'select#skillType-' + skillCount + '-' + level ).after(			'<label id="skillGroupLabel-' + skillCount + '-' + level + '" for="skillGroup[' + skillCount + '][' + level + ']" >Skill Group</label>' +			'<select id="skillGroup-' + skillCount + '-' + level + '" name="skillGroup[' + skillCount + '][' + level + ']" >'+				'<option value="-1">Select Skill Group</option>' +			'</select>'		);		for( n in self.options.skillGroup ){			$( 'select#skillGroup-' + skillCount + '-' + level ).append(				'<option value="' + n + '">' + self.options.skillGroup[n].name + '</option>'			);		}	}	$.fn[pluginName] = function( options ){		return this.each(function () {			if(!$.data(this, 'plugin_' + pluginName)) {				$.data(this, 'plugin_' + pluginName, new Plugin( this, options ));			} else if( typeof options === 'string' && options[0] !== '_' && options !== 'init' ){				return this.each( function(){					var instance = $.data( this, 'plugin_' + pluginName );					if( instance instanceof Plugin && typeof instance[options] === 'function' ){						instance[options].apply( instance, Array.prototype.slice.call( args, 1 ));					}				});			}		});	}}( jQuery, window ));